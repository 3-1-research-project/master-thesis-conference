@inproceedings{pereira2017energy,
  title={Energy efficiency across programming languages: how do energy, time, and memory relate?},
  author={Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Cunha, J{\'a}come and Fernandes, Jo{\~a}o Paulo and Saraiva, Jo{\~a}o},
  booktitle={Proceedings of the 10th ACM SIGPLAN international conference on software language engineering},
  pages={256--267},
  year={2017}
}

@inproceedings{kumar2017energy,
  title={Energy consumption in Java: An early experience},
  author={Kumar, Mohit and Li, Youhuizi and Shi, Weisong},
  booktitle={2017 Eighth International Green and Sustainable Computing Conference (IGSC)},
  pages={1--8},
  year={2017},
  organization={IEEE}
}

@misc{The_Green_Architecture_Framework_2023, 
    author={Henrik Bærbak Christensen},
    url={https://baerbak.cs.au.dk/papers/gaf.html}, year={2023} 
}

@article{khan2018rapl,
  title={Rapl in action: Experiences in using rapl for power measurements},
  author={Khan, Kashif Nizam and Hirki, Mikael and Niemi, Tapio and Nurminen, Jukka K and Ou, Zhonghong},
  journal={ACM Transactions on Modeling and Performance Evaluation of Computing Systems (TOMPECS)},
  volume={3},
  number={2},
  pages={1--26},
  year={2018},
  publisher={ACM New York, NY, USA}
}

 @inproceedings{Weber_Kaltenecker_Sattler_Apel_Siegmund_2023, address={Melbourne, Australia}, title={Twins or False Friends? A Study on Energy Consumption and Performance of Configurable Software}, rights={https://doi.org/10.15223/policy-029}, ISBN={978-1-6654-5701-9}, url={https://ieeexplore.ieee.org/document/10172770/}, DOI={10.1109/ICSE48619.2023.00177}, abstractNote={Reducing energy consumption of software is an increasingly important objective, and there has been extensive research for data centers, smartphones, and embedded systems. However, when it comes to software, we lack working tools and methods to directly reduce energy consumption. For performance, we can resort to configuration options for tuning response time or throughput of a software system. For energy, it is still unclear whether the underlying assumption that runtime performance correlates with energy consumption holds, especially when it comes to optimization via configuration. To evaluate whether and to what extent this assumption is valid for configurable software systems, we conducted the largest empirical study of this kind to date. First, we searched the literature for reports on whether and why runtime performance correlates with energy consumption. We obtained a mixed, even contradicting picture from positive to negative correlation, and that configurability has not been considered yet as a factor for this variance. Second, we measured and analyzed both the runtime performance and energy consumption of 14 real-world software systems. We found that, in many cases, it depends on the software system’s configuration whether runtime performance and energy consumption correlate and that, typically, only few configuration options influence the degree of correlation. A fine-grained analysis at the function level revealed that only few functions are relevant to obtain an accurate proxy for energy consumption and that, knowing them, allows one to infer individual transfer factors between runtime performance and energy consumption.}, booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)}, publisher={IEEE}, author={Weber, Max and Kaltenecker, Christian and Sattler, Florian and Apel, Sven and Siegmund, Norbert}, year={2023}, month=may, pages={2098–2110}, language={en} 
}

 @article{Dutta_Vandermeer_2023, title={A Case for Sustainability and Environment Friendliness in Software Development and Architecture Decisions by Taking Energy-Efficient Design Decisions}, url={http://arxiv.org/abs/2311.01680}, DOI={10.48550/arXiv.2311.01680}, abstractNote={IT power usage is a signiﬁcant concern. Data center energy consumption is estimated to account for 1% to 1.5% of all energy consumption worldwide. Hardware designers, data center designers, and other members of the IT community have been working to improve energy efﬁciency across many parts of the IT infrastructure; however, little attention has been paid to the energy efﬁciency of software components. Indeed, energy efﬁciency is currently not a common performance criteria for software. In this work, we attempt to quantify the potential for gains in energy efﬁciency in software, based on a set of examples drawn from common, everyday decisions made by software developers and enterprise architects. Our results show that there is potential for signiﬁcant energy savings through energy-conscious choices at software development and selection time.}, note={arXiv:2311.01680 [cs]}, number={arXiv:2311.01680}, publisher={arXiv}, author={Dutta, Kaushik and Vandermeer, Debra}, year={2023}, month=nov, language={en} 
}

 @inproceedings{Li_Hao_Gui_Halfond_2014, address={Victoria, BC, Canada}, title={An Empirical Study of the Energy Consumption of Android Applications}, ISBN={978-1-4799-6146-7}, url={http://ieeexplore.ieee.org/document/6976078/}, DOI={10.1109/ICSME.2014.34}, abstractNote={Energy is a critical resource for smartphones. However, developers who create apps for these platforms lack quantitative and objective information about the behavior of apps with respect to energy consumption. In this paper, we describe the results of our source-line level energy consumption study of 405 real-world market applications. Based on our study, we discover several interesting observations. For example, we ﬁnd on average apps spend 61% of their energy in idle states, network is the most energy consuming component, and only a few APIs dominate non-idle energy consumption. The results of this study provide developers with objective information about how energy is consumed by a broad sample of mobile applications and can guide them in their efforts of improving the energy efﬁciency of their applications.}, booktitle={2014 IEEE International Conference on Software Maintenance and Evolution}, publisher={IEEE}, author={Li, Ding and Hao, Shuai and Gui, Jiaping and Halfond, William G.J.}, year={2014}, month=sep, pages={121–130}, language={en} 
}

 @article{Georgiou_Kechagia_Spinellis_2017, title={Analyzing Programming Languages’ Energy Consumption:  An Empirical Study}, abstractNote={Motivation: Shifting from traditional local servers towards cloud computing and data centers—where different applications are facilitated, implemented, and communicate in different programming languages—implies new challenges in terms of energy usage. Goal: In this preliminary study, we aim to identify energy implications of small, independent tasks developed in different programming languages; compiled, semi-compiled, and interpreted ones.}, author={Georgiou, Stefanos and Kechagia, Maria and Spinellis, Diomidis}, year={2017}, language={en} 
}

 @inbook{Yuki_Rajopadhye_2014, address={Cham}, series={Lecture Notes in Computer Science}, title={Folklore Confirmed: Compiling for Speed $$=$$ Compiling for Energy}, volume={8664}, ISBN={978-3-319-09966-8}, url={https://link.springer.com/10.1007/978-3-319-09967-5_10}, DOI={10.1007/978-3-319-09967-5_10}, booktitle={Languages and Compilers for Parallel Computing}, publisher={Springer International Publishing}, author={Yuki, Tomofumi and Rajopadhye, Sanjay}, editor={Cașcaval, Călin and Montesinos, Pablo}, year={2014}, pages={169–184}, collection={Lecture Notes in Computer Science}, language={en} 
}

 @article{Kempen_Kwon_Nguyen_Berger_2024, title={It’s Not Easy Being Green: On the Energy Efficiency of Programming Languages}, url={http://arxiv.org/abs/2410.05460}, DOI={10.48550/arXiv.2410.05460}, abstractNote={Does the choice of programming language affect energy consumption? Previous highly visible studies have established associations between certain programming languages and energy consumption. A causal misinterpretation of this work has led academics and industry leaders to use or support certain languages based on their claimed impact on energy consumption. This paper tackles this causal question directly. It first corrects and improves the measurement methodology used by prior work. It then develops a detailed causal model capturing the complex relationship between programming language choice and energy consumption. This model identifies and incorporates several critical but previously overlooked factors that affect energy usage. These factors, such as distinguishing programming languages from their implementations, the impact of the application implementations themselves, the number of active cores, and memory activity, can significantly skew energy consumption measurements if not accounted for. We show -- via empirical experiments, improved methodology, and careful examination of anomalies -- that when these factors are controlled for, notable discrepancies in prior work vanish. Our analysis suggests that the choice of programming language implementation has no significant impact on energy consumption beyond execution time.}, note={arXiv:2410.05460 [cs]}, number={arXiv:2410.05460}, publisher={arXiv}, author={Kempen, Nicolas van and Kwon, Hyuk-Je and Nguyen, Dung Tuan and Berger, Emery D.}, year={2024}, month=oct, language={en} 
}

 @inproceedings{Oliveira_Torres_Castor_Ximenes_2016, address={Suita}, title={Native or Web? A Preliminary Study on the Energy Consumption of Android Development Models}, ISBN={978-1-5090-1855-0}, url={http://ieeexplore.ieee.org/document/7476678/}, DOI={10.1109/SANER.2016.93}, abstractNote={Energy consumption has become an increasingly important topic in software development, especially due to the ubiquity of mobile devices, and the choice of programming language can directly impact battery life. This paper presents a study aiming to shed some light on the issue of energy efﬁciency on the Android platform, comparing the performance and energy consumption of 33 different benchmarks in the two main programming languages employed in Android development: Java and JavaScript. Preliminary results show that Java applications may consume up to 56x more energy, with a median of 2.28x, than their JavaScript counterparts, in benchmarks that are mostly CPU-intensive. In some scenarios, though, the Java benchmarks exhibited better energy efﬁciency, with JavaScript consuming up to 2.27x more energy. Based on these results, two Java applications were re-engineered, and through the insertion of JavaScript functions, hybrid applications were produced. In both cases, improvements in energy efﬁciency were obtained. Considering that Android apps written in Java are the norm, the results from this study indicate that using a combination of JavaScript and Java may lead to a non-negligible improvement in energy efﬁciency.}, booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)}, publisher={IEEE}, author={Oliveira, Wellington and Torres, Weslley and Castor, Fernando and Ximenes, Bianca H.}, year={2016}, month=mar, pages={589–593}, language={en} 
}

 @article{Gordillo_Calero_Moraga_García_Fernandes_Abreu_Saraiva_2024, title={Programming languages ranking based on energy measurements}, volume={32}, ISSN={0963-9314, 1573-1367}, DOI={10.1007/s11219-024-09690-4}, abstractNote={Software is developed using programming languages whose choice is made based on a wide range of criteria, but it should be noted that the programming language selected can affect the quality of the software product. In this paper, we focus on analysing the differences in energy consumption when running certain algorithms that have been developed using different programming languages. Therefore, we focus on the software quality from the perspective of greenability, in concrete in the aspects related to energy efficiency. For this purpose, this study has conducted an empirical investigation about the most suitable programming languages from an energy efficiency perspective using a hardware-based consumption measurement instrument that obtains real data about energy consumption. The study builds upon a previous study in which energy efficiency of PL were ranked using a software-based approach where the energy consumption is an estimation. As a result, no significant differences are obtained between two approaches, in terms of ranking the PL. However, if it is required to have a more realistic knowledge of consumption, it is necessary to use hardware approaches. Furthermore, the hardware approach provides information about the energy consumption of specific DUT hardware components, such as, HDD, graphics card, and processor, and a ranking for each of component is elaborated. This can provide useful information to make a more informed decision on the choice of a PL, depending on several factors, such as the type of algorithms to be implemented, or the effects on power consumption not only in overall, but also depending on specific DUT hardware components.}, number={4}, journal={Software Quality Journal}, author={Gordillo, Alberto and Calero, Coral and Moraga, Mª Ángeles and García, Félix and Fernandes, João Paulo and Abreu, Rui and Saraiva, João}, year={2024}, month=dec, pages={1539–1580}, language={en} 
}

 @article{Pereira_Couto_Ribeiro_Rua_Cunha_Fernandes_Saraiva_2021, title={Ranking programming languages by energy efficiency}, volume={205}, ISSN={01676423}, DOI={10.1016/j.scico.2021.102609}, abstractNote={This paper compares a large set of programming languages regarding their eﬃciency, including from an energetic point-of-view. Indeed, we seek to establish and analyze diﬀerent rankings for programming languages based on their energy eﬃciency. The goal of being able to rank programming languages based on their energy eﬃciency is both recent, and certainly deserves further studies. We have taken rigorous and strict solutions to 10 well deﬁned programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and conﬁgurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory eﬃciency of such solutions. Ultimately, it is based on such comparisons that we propose a series of eﬃciency rankings, based on single and multiple criteria.}, journal={Science of Computer Programming}, author={Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Cunha, Jácome and Fernandes, João Paulo and Saraiva, João}, year={2021}, month=may, pages={102609}, language={en} 
}

 @inproceedings{Couto_Pereira_Ribeiro_Rua_Saraiva_2017, address={Fortaleza CE Brazil}, title={Towards a Green Ranking for Programming Languages}, ISBN={978-1-4503-5389-2}, url={https://dl.acm.org/doi/10.1145/3125374.3125382}, DOI={10.1145/3125374.3125382}, abstractNote={While in the past the primary goal to optimize software was the run time optimization, nowadays there is a growing awareness of the need to reduce energy consumption. Additionally, a growing number of developers wish to become more energy-aware when programming and feel a lack of tools and the knowledge to do so. In this paper we define a ranking of energy efficiency in programming languages. We consider a set of computing problems implemented in ten well-known programming languages, and monitored the energy consumed when executing each language. Our preliminary results show that although the fastest languages tend to be the lowest consuming ones, there are other interesting cases where slower languages are more energy efficient than faster ones.}, booktitle={Proceedings of the 21st Brazilian Symposium on Programming Languages}, publisher={ACM}, author={Couto, Marco and Pereira, Rui and Ribeiro, Francisco and Rua, Rui and Saraiva, João}, year={2017}, month=sep, pages={1–8}, language={en} 
}

 @article{Pfeiffer_Trindade_Meding_Harwick, title={A Comparative Analysis of Languages, Frameworks, and Related Technologies}, author={Trindade, Eduardo Sfreddo and Meding, Gustav Henrik and Harwick}, language={en} 
}

 @inbook{Pfeiffer_2024, address={Cham}, series={Communications in Computer and Information Science}, title={On the Energy Consumption of CPython}, volume={2178}, ISBN={978-3-031-70244-0}, url={https://link.springer.com/10.1007/978-3-031-70245-7_14}, DOI={10.1007/978-3-031-70245-7_14}, abstractNote={Interpreted programming languages, like Python, are amongst the most popular programming languages. This, combined with high developer efficiency leads to many web-application backends and webservices that are written in Python. While it is known that interpreted languages like Python are way less energy efficient compared to compiled languages like C++, Rust, etc., little is known about the energy efficiency of various versions of Python interpreters. In this paper, we study via a controlled lab experiment the energy consumption of various versions of the Python interpreter CPython when running a server-side rendered web-application. Our results indicate that currently the most energy efficient version is CPython 3.12. Energy consumption of CPython 3.12 can drop by more than 8% compared to previous versions.}, booktitle={Quality of Information and Communications Technology}, publisher={Springer Nature Switzerland}, author={Pfeiffer, Rolf-Helge}, editor={Bertolino, Antonia and Pascoal Faria, João and Lago, Patricia and Semini, Laura}, year={2024}, pages={194–209}, collection={Communications in Computer and Information Science}, language={en} 
}

 @article{Pfeiffer_Offenberg_Pedersen_Landsgaard_Karlsen, title={On the energy consumption of web application developed using different programming languages, frameworks, and configurations}, abstractNote={Given the increased focus driven by the European Union’s environmental directives on energy consumption, research into how software consumes energy is required. Current research has looked into the energy consumption of programming languages solving algorithmic- or general programming problems. In contrast, little research has looked into the energy consumption of more complex use cases. Specifically, there is no clear information about how programming languages, frameworks, and configurations impact the energy consumption of web applications.}, author={Karlsen, Nicolai Pihl and Landsgaard, Malou Elmelund and Pedersen, Magnus Stig and Offenberg, Lukas Vinther}, language={en} 
}

 @article{Wysocki_Miciuła_Plecka_2025, title={Methods of Improving Software Energy Efficiency: A Systematic Literature Review and the Current State of Applied Methods in Practice}, volume={14}, rights={https://creativecommons.org/licenses/by/4.0/}, ISSN={2079-9292}, DOI={10.3390/electronics14071331}, abstractNote={Software energy efficiency management is still a serious challenge and provides an opportunity to introduce improvements that will reduce the resources needed for the successful functioning of the Information Technology (IT) world. After all, in the modern era of information society, computers are a basic work tool. This article presents the current state of application of good practices and methods for reducing energy consumption by software. The aim of the article is to indicate the need to optimize computer devices’ use of electricity in accordance with the concept of sustainable development and to analyze methods for reducing energy consumption. The article discusses the most popular techniques for reducing energy consumption by software, which is of fundamental importance for this type of organization and translates into the costs of services provided, and indirectly affects the future of the world economy. The aim of scientific research carried out in this way is to support decision-makers in the search for energy-saving solutions.}, number={7}, journal={Electronics}, author={Wysocki, Włodzimierz and Miciuła, Ireneusz and Plecka, Przemysław}, year={2025}, month=mar, pages={1331}, language={en} 
}

 @article{Roque_Cruz_Durieux_2024, title={Unveiling the Energy Vampires: A Methodology for Debugging Software Energy Consumption}, url={http://arxiv.org/abs/2412.10063}, DOI={10.48550/arXiv.2412.10063}, abstractNote={Energy consumption in software systems is becoming increasingly important, especially in large-scale deployments. However, debugging energy-related issues remains challenging due to the lack of specialized tools. This paper presents an energy debugging methodology for identifying and isolating energy consumption hotspots in software systems. We demonstrate the methodology’s effectiveness through a case study of Redis, a popular in-memory database. Our analysis reveals significant energy consumption differences between Alpine and Ubuntu distributions, with Alpine consuming up to 20.2% more power in certain operations. We trace this difference to the implementation of the memcpy function in different C standard libraries (musl vs. glibc). By isolating and benchmarking memcpy, we confirm it as the primary cause of the energy discrepancy. Our findings highlight the importance of considering energy efficiency in software dependencies and demonstrate the capability to assist developers in identifying and addressing energy-related issues. This work contributes to the growing field of sustainable software engineering by providing a systematic approach to energy debugging and using it to unveil unexpected energy behaviors in Alpine.}, note={arXiv:2412.10063 [cs]}, number={arXiv:2412.10063}, publisher={arXiv}, author={Roque, Enrique Barba and Cruz, Luis and Durieux, Thomas}, year={2024}, month=dec, language={en} }

 @inproceedings{Philippot_Anglade_Leboucq_2014, address={Stockholm, Sweden}, title={Characterization of the energy consumption of websites: Impact of website implementation on resource consumption:}, url={https://www.atlantis-press.com/article/13439}, DOI={10.2991/ict4s-14.2014.21}, abstractNote={This document presents the Web Energy Archive (WEA) project led by the Green Code Lab. This tools aims at measuring the computer resource consumption (energy, memory…) of the loading of a website in a browser. Firstly, considering the measure of 500 websites, website behavior can be characterized in terms of environmental impact. In a second step, best practices (green patterns) can be recommended to developers but also to browser editors.}, author={Philippot, Olivier and Anglade, Alain and Leboucq, Thierry}, year={2014}, language={en} 
}


 @inbook{Lamprakos_Papadopoulos_Catthoor_Soudris_2022, address={Cham}, series={Lecture Notes in Computer Science}, title={The Impact of Dynamic Storage Allocation on CPython Execution Time, Memory Footprint and Energy Consumption: An Empirical Study}, volume={13511}, ISBN={978-3-031-15073-9}, url={https://link.springer.com/10.1007/978-3-031-15074-6_14}, DOI={10.1007/978-3-031-15074-6_14}, abstractNote={CPython is the reference implementation of the Python programming language, as well as the most popular one. Tools like machine learning frameworks, web development interfaces and scientific computing libraries have been built on top of it. Meanwhile, singleboard computers are now able to run GNU/Linux distributions. As a result, CPython’s influence today is not limited to commodity servers, but also includes edge and mobile devices. We should thus be concerned with the performance of CPython applications. In this spirit, we investigate the impact of dynamic storage allocation on the execution time, memory footprint and energy consumption of CPython programs. Our findings show that (i) CPython’s default configuration is optimized for memory footprint, (ii) replacing this configuration can improve performance by up to 1.135x and (iii) application-specific characteristics define which allocator setup performs best at each case. Additionally, we contribute an open-source means of benchmarking the energy consumption of CPython applications, which we implemented for our experiments. Last but not least, by employing a rigorous and reliable statistical analysis technique, we provide strong indicators that our conclusions are platform-independent.}, booktitle={Embedded Computer Systems: Architectures, Modeling, and Simulation}, publisher={Springer International Publishing}, author={Lamprakos, Christos P. and Papadopoulos, Lazaros and Catthoor, Francky and Soudris, Dimitrios}, editor={Orailoglu, Alex and Reichenbach, Marc and Jung, Matthias}, year={2022}, pages={219–234}, collection={Lecture Notes in Computer Science}, language={en} 
}

@inproceedings{Li_Wu_Kavi_Mehta_Yadwadkar_John_2023, address={Providence RI USA}, title={NextGen-Malloc: Giving Memory Allocator Its Own Room in the House}, ISBN={979-8-4007-0195-5}, url={https://dl.acm.org/doi/10.1145/3593856.3595911}, DOI={10.1145/3593856.3595911}, abstractNote={Memory allocation and management have a significant impact on performance and energy of modern applications. We observe that performance can vary by as much as 72% in some applications based on which memory allocator is used. Many current allocators are multi-threaded to support concurrent allocation requests from different threads. However, such multi-threading comes at the cost of maintaining complex metadata that is tightly coupled and intertwined with user data. When memory management functions and other user programs run on the same core, the metadata used by management functions may pollute the processor caches and other resources.}, booktitle={Proceedings of the 19th Workshop on Hot Topics in Operating Systems}, publisher={ACM}, author={Li, Ruihao and Wu, Qinzhe and Kavi, Krishna and Mehta, Gayatri and Yadwadkar, Neeraja J. and John, Lizy K.}, year={2023}, month=jun, pages={135–142}, language={en} 
}

 @article{Stoico_Dragomir_Lago_2025, title={An Empirical Study on the Performance and Energy Usage of Compiled Python Code}, url={http://arxiv.org/abs/2505.02346}, DOI={10.48550/arXiv.2505.02346}, abstractNote={Python is a popular programming language known for its ease of learning and extensive libraries. However, concerns about performance and energy consumption have led to the development of compilers to enhance Python code efficiency. Despite the proven benefits of existing compilers on the efficiency of Python code, there is limited analysis comparing their performance and energy efficiency, particularly considering code characteristics and factors like CPU frequency and core count. Our study investigates how compilation impacts the performance and energy consumption of Python code, using seven benchmarks compiled with eight different tools: PyPy, Numba, Nuitka, Mypyc, Codon, Cython, Pyston-lite, and the experimental Python 3.13 version, compared to CPython. The benchmarks are single-threaded and executed on an NUC and a server, measuring energy usage, execution time, memory usage, and Last-Level Cache (LLC) miss rates at a fixed frequency and on a single core. The results show that compilation can significantly enhance execution time, energy and memory usage, with Codon, PyPy, and Numba achieving over 90% speed and energy improvements. Nuitka optimizes memory usage consistently on both testbeds. The impact of compilation on LLC miss rate is not clear since it varies considerably across benchmarks for each compiler. Our study is important for researchers and practitioners focused on improving Python code performance and energy efficiency. We outline future research directions, such as exploring caching effects on energy usage. Our findings help practitioners choose the best compiler based on their efficiency benefits and accessibility.}, note={arXiv:2505.02346 [cs]}, number={arXiv:2505.02346}, publisher={arXiv}, author={Stoico, Vincenzo and Dragomir, Andrei Calin and Lago, Patricia}, year={2025}, month=may, language={en} 
}

 @inproceedings{Hu_John_2006, address={Ottawa Ontario Canada}, title={Impact of virtual execution environments on processor energy consumption and hardware adaptation}, ISBN={978-1-59593-332-4}, url={https://dl.acm.org/doi/10.1145/1134760.1134775}, DOI={10.1145/1134760.1134775}, abstractNote={During recent years, microprocessor energy consumption has been surging and efforts to reduce power and energy have received a lot of attention. At the same time, virtual execution environments (VEEs), such as Java virtual machines, have grown in popularity. Hence, it is important to evaluate the impact of virtual execution environments on microprocessor energy consumption. This paper characterizes the energy and power impact of two important components of VEEs, Just-in-time (JIT) optimization and garbage collection. We find that by reducing instruction counts, JIT optimization significantly reduces energy consumption, while garbage collection incurs runtime overhead that consumes more energy. Importantly, both JIT optimization and garbage collection decrease the average power dissipated by a program. Detailed analysis reveals that both JIT optimizer and JIT optimized code dissipate less power than un-optimized code. On the other hand, being memory bound and with low ILP, the garbage collector dissipates less power than the application code, but rarely affects the average power of the latter.}, booktitle={Proceedings of the 2nd international conference on Virtual execution environments}, publisher={ACM}, author={Hu, Shiwen and John, Lizy K.}, year={2006}, month=jun, pages={100–110}, language={en} 
}
 
@inproceedings{Ournani_Belgaid_Rouvoy_Rust_Penhoat_2021, address={Bari Italy}, title={Evaluating the Impact of Java Virtual Machines on Energy Consumption}, ISBN={978-1-4503-8665-4}, url={https://dl.acm.org/doi/10.1145/3475716.3475774}, DOI={10.1145/3475716.3475774}, abstractNote={Background. The Java Virtual Machine (JVM) platforms have known multiple evolutions along the last decades to enhance both the performance they exhibit and the features they offer. With regards to energy consumption, few studies have investigated the energy consumption of code and data structures. Yet, we keep missing an evaluation of the energy efficiency of existing JVM platforms and an identification of the configurations that minimize the energy consumption of software hosted on the JVM. Aims. The purpose of this paper is to investigate the variations in energy consumption between different JVM distributions and parameters to help developers configure the least consuming environment for their Java application.
Method. We thus assess the energy consumption of some of the most popular and supported JVM platforms using 12 Java benchmarks that explore different performance objectives. Moreover, we investigate the impact of the different JVM parameters and configurations on the energy consumption of software.
Results. Our results show that some JVM platforms can exhibit up to 100% more energy consumption. JVM configurations can also play a substantial role to reduce the energy consumption during the software execution. Interestingly, the default configuration of the garbage collector was energy efficient in only 50% of our experiments.
Conclusion. Finally, we provide an Open source tool, named JReferral that recommends an energy-efficient JVM distribution and configuration for any Java application.}, booktitle={Proceedings of the 15th ACM / IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, publisher={ACM}, author={Ournani, Zakaria and Belgaid, Mohammed Chakib and Rouvoy, Romain and Rust, Pierre and Penhoat, Joël}, year={2021}, month=oct, pages={1–11}, language={en} 
}

